#!/usr/bin/ruby

require 'ojagent'

require 'find'
require 'logger'
require 'stringio'

require 'slop'
require 'highline'

ME = 'quicksubmit'

Agents = {}
OJAgent.all.each do |agent|
  name = agent.name.downcase
  name.sub!(/.*::/, '')
  name.sub!(/agent$/, '')
  Agents[name] = agent
end

Ext2Lang = {
  '.pas'  => :pascal,
  '.c'    => :c,
  '.cs'   => :cs,
  '.cpp'  => :cpp,
  '.java' => :java
}

def to_comment(status, lang)
  if lang == :pascal
    open, close, inline = '{', '}', nil
  else
    open, close, inline = '/*', '*/', nil
  end

  ios = StringIO.new('', 'w')
  ios.puts
  ios.puts open if open
  status.each do |k, v|
    ios.puts "#{k} => #{v}"
  end
  ios.puts close if close
  ios.string
end

# opts
opts = Slop.new :strict => true, :help => true do
  banner <<-BANNER
#{ME} -j judge [options] [-s src]
#{ME} -j judge [options] [files ...]
#{ME} -j judge [options] -i pid [-e lang] file
#{ME} -l
  BANNER

  on :l, :list,      'List all available online judges.'
  on :j, :judge=,    'The remote online judge name, required.',
    :default => ENV['OJ_JUDGE'], :required => ENV['OJ_JUDGE'].nil?, :as => :symbol
  on :s, :source=,   'The directory of files to processe.'
  on :t, :dest=,     'The directory for storing processed files.'
  on :r, :retries=,  'The number of retries for each operation.',   :as => :integer
  on :d, :duration=, 'The time to wait before each retry.',         :as => :float
  on :b, :break=,    'The break between submissions.',              :as => :float
  on :u, :user=,     'Override $OJ_USERNAME, usually required.',
    :default => ENV['OJ_USERNAME'], :required => ENV['OJ_USERNAME'].nil?
  on :p, :pass=,     'Override $OJ_PASSWORD, prompt to ask when required.',
    :default => ENV['OJ_PASSWORD']
  on :i, :pid=,      'Problem id, extract from filename when omitted.'
  on :e, :lang=,     'Program language, extract from extension when omitted.',
    :as => :symbol
end

begin
  opts.parse!
rescue Slop::Error
  raise unless opts[:help] || opts[:list]
end

# help
exit 0 if opts[:help]

# list
if opts[:list]
  Agents.to_a.sort.each do |name, agent|
    puts '%-12s %s' % [name, agent.new.base_uri]
  end
  exit 0
end

# init
judge = opts[:judge]
if Agents[judge].nil?
  raise Slop::InvalidArgumentError, "#{judge} is not a supported judge"
else
  OJ = Agents[judge].new
end

OJ.retries = opts[:retries] if opts[:retries]
OJ.duration = opts[:duration] if opts[:duration]

user = opts[:user]
pass = opts[:pass] ||
  HighLine.new.ask("#{user}@#{judge}'s password: "){|q| q.echo = false}
OJ.login(user, pass)

DESTINATION = opts[:dest] || '.'

BREAK = opts[:break] ? opts[:break] : 10

LOG = Logger.new($stderr)

# main
if opts[:source] || $*.empty?
  Find.find(opts[:source] || '.') do |path|
    $* << path if File.file?(path)
  end
end

$*.uniq.each do |path|
  base = File.basename(path)
  pid = opts[:pid] || base[/^\d{4}/]

  ext = File.extname(path)
  lang = opts[:lang] || Ext2Lang[ext]

  if pid && lang
    LOG.info "PROCESS #{path}"
  else
    LOG.warn "IGNORE #{path}"
    next
  end

  begin
    code = IO.read(path)
    id = OJ.submit! pid, code, lang
    status = OJ.status! id
    code += to_comment(status, lang)

    FileUtils.mkdir_p(DESTINATION)
    path = "#{DESTINATION}/#{base}"
    path.sub!(/#{ext}$/, ".#{Time.now.to_i}#{ext}") if File.exists? path
    IO.write(path, code)

    LOG.add status[:status] =~ /accepted/i ? Logger::INFO : Logger::WARN, status
  rescue Exception => ex
    LOG.error ex
  end

  sleep BREAK
end
